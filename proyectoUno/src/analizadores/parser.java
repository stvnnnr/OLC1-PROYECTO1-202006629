
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import estructuras.ListaExpresiones;
import estructuras.NodoConjunto;
import estructuras.NodoExpresion;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import static proyectouno.ProyectoUno.conjuntos;
import static proyectouno.ProyectoUno.errores;
import static proyectouno.ProyectoUno.regularExpression;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\004\000\002\003\004\000\002\005\004" +
    "\000\002\005\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\004\004\000\002" +
    "\007\003\000\002\027\002\000\002\010\010\000\002\030" +
    "\002\000\002\017\005\000\002\020\005\000\002\020\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\021\005\000\002\021" +
    "\003\000\002\013\003\000\002\013\003\000\002\011\004" +
    "\000\002\012\003\000\002\012\003\000\002\031\002\000" +
    "\002\014\005\000\002\032\002\000\002\022\005\000\002" +
    "\022\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\025\005\000\002\026\003\000\002\026\003\000\002" +
    "\015\004\000\002\016\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\006\003\005\007\006\001\002\000\004\002" +
    "\000\001\002\000\006\006\116\010\115\001\002\000\014" +
    "\003\021\012\016\014\020\016\017\021\013\001\002\000" +
    "\004\002\010\001\002\000\004\002\001\001\002\000\016" +
    "\003\ufffa\010\ufffa\012\ufffa\014\ufffa\016\ufffa\021\ufffa\001" +
    "\002\000\016\003\021\010\112\012\016\014\020\016\017" +
    "\021\013\001\002\000\006\004\uffe3\011\uffe3\001\002\000" +
    "\016\003\ufff9\010\ufff9\012\ufff9\014\ufff9\016\ufff9\021\ufff9" +
    "\001\002\000\016\003\ufff8\010\ufff8\012\ufff8\014\ufff8\016" +
    "\ufff8\021\ufff8\001\002\000\016\003\ufff5\010\ufff5\012\ufff5" +
    "\014\ufff5\016\ufff5\021\ufff5\001\002\000\006\004\uffe4\011" +
    "\uffe4\001\002\000\004\004\061\001\002\000\006\006\060" +
    "\010\057\001\002\000\006\004\026\011\023\001\002\000" +
    "\026\006\uffdf\007\uffdf\015\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\001\002\000\016\003" +
    "\uffe2\010\uffe2\012\uffe2\014\uffe2\016\uffe2\021\uffe2\001\002" +
    "\000\016\003\uffe1\010\uffe1\012\uffe1\014\uffe1\016\uffe1\021" +
    "\uffe1\001\002\000\004\015\031\001\002\000\016\003\uffe0" +
    "\010\uffe0\012\uffe0\014\uffe0\016\uffe0\021\uffe0\001\002\000" +
    "\016\003\uffce\010\uffce\012\uffce\014\uffce\016\uffce\021\uffce" +
    "\001\002\000\004\006\032\001\002\000\016\003\uffcd\010" +
    "\uffcd\012\uffcd\014\uffcd\016\uffcd\021\uffcd\001\002\000\026" +
    "\006\045\007\042\015\034\022\036\023\035\024\050\025" +
    "\043\026\046\027\037\030\040\001\002\000\026\006\uffd9" +
    "\007\uffd9\015\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\001\002\000\026\006\uffd3\007\uffd3" +
    "\015\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\001\002\000\026\006\uffd4\007\uffd4\015\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\001\002\000\026\006\uffd6\007\uffd6\015\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\001" +
    "\002\000\026\006\uffd5\007\uffd5\015\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\001\002\000" +
    "\026\006\uffdd\007\uffdd\015\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\001\002\000\006\016" +
    "\052\021\051\001\002\000\026\006\uffd7\007\uffd7\015\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\001\002\000\016\003\uffde\010\uffde\012\uffde\014\uffde" +
    "\016\uffde\021\uffde\001\002\000\016\003\uffdb\010\uffdb\012" +
    "\uffdb\014\uffdb\016\uffdb\021\uffdb\001\002\000\026\006\uffd8" +
    "\007\uffd8\015\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\001\002\000\026\006\uffd2\007\uffd2" +
    "\015\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\001\002\000\026\006\uffda\007\uffda\015\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\001\002\000\004\010\uffcf\001\002\000\004\010\uffd0" +
    "\001\002\000\004\010\054\001\002\000\026\006\uffd1\007" +
    "\uffd1\015\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\001\002\000\026\006\045\007\042\015" +
    "\034\022\036\023\035\024\050\025\043\026\046\027\037" +
    "\030\040\001\002\000\016\003\uffdc\010\uffdc\012\uffdc\014" +
    "\uffdc\016\uffdc\021\uffdc\001\002\000\016\003\ufff6\010\ufff6" +
    "\012\ufff6\014\ufff6\016\ufff6\021\ufff6\001\002\000\016\003" +
    "\ufff7\010\ufff7\012\ufff7\014\ufff7\016\ufff7\021\ufff7\001\002" +
    "\000\004\016\062\001\002\000\004\011\ufff4\001\002\000" +
    "\004\011\064\001\002\000\022\004\066\006\074\007\073" +
    "\010\071\015\065\017\075\020\070\021\067\001\002\000" +
    "\010\005\uffe7\006\uffe7\013\uffe7\001\002\000\010\005\uffea" +
    "\006\uffea\013\uffea\001\002\000\010\005\uffec\006\uffec\013" +
    "\uffec\001\002\000\010\005\uffed\006\uffed\013\uffed\001\002" +
    "\000\010\005\uffe8\006\uffe8\013\uffe8\001\002\000\010\005" +
    "\ufff2\006\ufff2\013\ufff2\001\002\000\010\005\uffe9\006\uffe9" +
    "\013\uffe9\001\002\000\010\005\uffeb\006\uffeb\013\uffeb\001" +
    "\002\000\010\005\uffee\006\uffee\013\uffee\001\002\000\016" +
    "\003\ufff3\010\ufff3\012\ufff3\014\ufff3\016\ufff3\021\ufff3\001" +
    "\002\000\010\005\102\006\104\013\100\001\002\000\022" +
    "\004\066\006\074\007\073\010\071\015\065\017\075\020" +
    "\070\021\067\001\002\000\016\003\uffef\010\uffef\012\uffef" +
    "\014\uffef\016\uffef\021\uffef\001\002\000\022\004\066\006" +
    "\074\007\073\010\071\015\065\017\075\020\070\021\067" +
    "\001\002\000\016\003\ufff1\010\ufff1\012\ufff1\014\ufff1\016" +
    "\ufff1\021\ufff1\001\002\000\016\003\uffe5\010\uffe5\012\uffe5" +
    "\014\uffe5\016\uffe5\021\uffe5\001\002\000\004\006\106\001" +
    "\002\000\016\003\ufff0\010\ufff0\012\ufff0\014\ufff0\016\ufff0" +
    "\021\ufff0\001\002\000\006\006\104\013\100\001\002\000" +
    "\016\003\uffe6\010\uffe6\012\uffe6\014\uffe6\016\uffe6\021\uffe6" +
    "\001\002\000\016\003\021\010\112\012\016\014\020\016" +
    "\017\021\013\001\002\000\004\002\ufffb\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\ufffc\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\006\002\006\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\011\007\014\010\010" +
    "\011\013\013\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\110\005\112\007\014" +
    "\010\010\011\013\013\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\023\014\024\015\026\001\001\000\004\031\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\043\024\040\025\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\054\001" +
    "\001\000\004\026\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\055\024" +
    "\040\025\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\062\001" +
    "\001\000\002\001\001\000\006\017\075\023\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\102\021\100\001\001\000\004" +
    "\023\106\001\001\000\002\001\001\000\004\023\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\107\001\001\000\002\001" +
    "\001\000\016\004\110\005\113\007\014\010\010\011\013" +
    "\013\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        errores.NewError("Sintactico", ""+s.value,s.left+1,s.right+1);
        //System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        errores.NewError("Sintactico", ""+s.value,s.left+1,s.right+1); 
        //System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    NodoConjunto nc;
    String ch1="";
    NodoExpresion nodE;
    String identi="";
    boolean esCon=false;
    ListaExpresiones listEx;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= LLAVE1 INSTRUCCION INSTRUCCION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= error LLAVE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION2 ::= INSTRUCCION INSTRUCCION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION2 ::= LLAVE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= CONJUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= IDENTIFICATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SEPARADORES1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= error LLAVE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SEPARADORES1 ::= SEPARADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEPARADORES1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

            nc=new NodoConjunto(""+id);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONJUNTOS ::= CONJ1 DOSPUNTOS ID NT$0 FLECHA VAR_CONJ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

            ch1=c;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VAR_CONJ ::= CHAAR NT$1 VAR_CONJ2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_CONJ",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VAR_CONJ2 ::= GUIONC CHAAR PUNTOCOMA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            nc.rango=true;
            nc.AgregaReglas(""+ch1);
            nc.AgregaReglas(""+c);
            conjuntos.AgregarConjunto(nc);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_CONJ2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VAR_CONJ2 ::= MAS_CAR 
            {
              Object RESULT =null;
		
            nc.rango=false;
            nc.AgregaReglas(""+ch1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_CONJ2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CHAAR ::= CARACTER 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=ca;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHAAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CHAAR ::= ENTERO 
            {
              String RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=en;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHAAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CHAAR ::= LETRA 
            {
              String RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=le;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHAAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CHAAR ::= PUNTOCOMA 
            {
              String RESULT =null;
		
            RESULT=";";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHAAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CHAAR ::= DOSPUNTOS 
            {
              String RESULT =null;
		
            RESULT=":";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHAAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CHAAR ::= LLAVE1 
            {
              String RESULT =null;
		
            RESULT="{";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHAAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CHAAR ::= LLAVE2 
            {
              String RESULT =null;
		
            RESULT="}";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHAAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CHAAR ::= CADENA 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if (cad.charAt(0) == '_') {
            cad = cad.substring(1);
            }
            RESULT=cad;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHAAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MAS_CAR ::= COMA CHAAR MAS_CAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            nc.AgregaReglas(""+c);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAS_CAR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MAS_CAR ::= PUNTOCOMA 
            {
              Object RESULT =null;
		
            conjuntos.AgregarConjunto(nc);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAS_CAR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IDENTIFICATOR3 ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                identi=id;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICATOR3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IDENTIFICATOR3 ::= LETRA 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                identi=le;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICATOR3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IDENTIFICATOR ::= IDENTIFICATOR3 IDENTIFICATOR2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICATOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IDENTIFICATOR2 ::= REG_EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICATOR2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IDENTIFICATOR2 ::= LISTA_EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICATOR2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$2 ::= 
            {
              Object RESULT =null;

          listEx=new ListaExpresiones();
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // REG_EXP ::= FLECHA NT$2 MAS_EXP_POL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REG_EXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$3 ::= 
            {
              Object RESULT =null;
		int eppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eppright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String epp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                listEx.AgregarExpresion(epp,esCon);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MAS_EXP_POL ::= EXP_POL NT$3 MAS_EXP_POL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String epp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAS_EXP_POL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MAS_EXP_POL ::= PUNTOCOMA 
            {
              Object RESULT =null;
		
                regularExpression.AgregarExp(identi,listEx);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAS_EXP_POL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP_POL ::= CONCAT1 
            {
              String RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=co;
            esCon=false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP_POL ::= CADENA 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=ca;
            esCon=false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP_POL ::= KLEENE1 
            {
              String RESULT =null;
		int kleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String kle = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=kle;
            esCon=false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP_POL ::= OR1 
            {
              String RESULT =null;
		int orrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int orrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String orr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=orr;
            esCon=false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP_POL ::= POSITIVE1 
            {
              String RESULT =null;
		int posileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int posiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String posi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=posi;
            esCon=false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP_POL ::= OPTIONAL1 
            {
              String RESULT =null;
		int optileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int optiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String opti = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=opti;
            esCon=false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP_POL ::= COMILLA1 
            {
              String RESULT =null;
		int comi1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comi1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String comi1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=comi1;
            esCon=false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP_POL ::= COMILLA2 
            {
              String RESULT =null;
		int comi2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comi2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String comi2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=comi2;
            esCon=false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP_POL ::= EXP_CONJ 
            {
              String RESULT =null;
		int excoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int excoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exco = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=exco;
            esCon=true;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_POL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP_CONJ ::= LLAVE1 EXP_CONJ2 LLAVE2 
            {
              String RESULT =null;
		int ec2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ec2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ec2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT=ec2;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONJ",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP_CONJ2 ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=id;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONJ2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP_CONJ2 ::= LETRA 
            {
              String RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=le;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONJ2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LISTA_EXP ::= DOSPUNTOS DEF_EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DEF_EXP ::= CADENA PUNTOCOMA 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            regularExpression.ActualizaValor(identi,ca);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF_EXP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
